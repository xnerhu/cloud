load("@npm//@bazel/typescript:index.bzl", "ts_config", "ts_project")
load("@build_bazel_rules_nodejs//:index.bzl", "copy_to_bin", "nodejs_binary")
load("@npm//@mikro-orm/cli:index.bzl", "mikro_orm")
load("//rules:jest.bzl", "jest_test")
load("//rules:node.bzl", "nodejs_app")

package(default_visibility = ["//visibility:public"])

ts_config(
    name = "tsconfig_app",
    src = "tsconfig.app.json",
    deps = [
        "//:tsconfig.json",
        "//common/fastify:tsconfig",
        "//common/nest:tsconfig",
        "//common/node:tsconfig",
        "//common/utils:tsconfig",
    ],
)

ts_config(
    name = "tsconfig_db",
    src = "tsconfig.db.json",
    deps = [
        "//:tsconfig.json",
    ],
)

ts_config(
    name = "tsconfig_test",
    src = "tsconfig.spec.json",
    deps = [
        "//:tsconfig.json",
    ],
)

TEST_FILES = ["src/**/*.test.ts"]

SRC_FILES = glob(
    [
        "src/**/*.ts",
    ],
    exclude = TEST_FILES,
)

DEPS = [
    "//common/node",
    "//common/fastify",
    "//common/nest",
    "//common/utils",
    "@npm//@types/node",
    "@npm//fastify-helmet",
    "@npm//fastify-formbody",
    "@npm//typeorm",
    "@npm//pg",
    "@npm//reflect-metadata",
    "@npm//@nestjs/common",
    "@npm//@nestjs/core",
    "@npm//@nestjs/platform-fastify",
    "@npm//@nestjs/typeorm",
    "@npm//@nestjs/config",
    "@npm//class-validator",
    "@npm//class-transformer",
    "@npm//rxjs",
    "@npm//@mikro-orm/core",
    "@npm//@mikro-orm/nestjs",
    "@npm//@mikro-orm/postgresql",
    "@npm//@mikro-orm/seeder",
    "@npm//joi",
]

ts_project(
    name = "components",
    srcs = SRC_FILES,
    composite = True,
    declaration = True,
    incremental = True,
    source_map = True,
    tsconfig = ":tsconfig_app",
    deps = DEPS,
)

ts_project(
    name = "components_db",
    srcs = glob(
        ["db/**/*.ts"],
    ),
    composite = True,
    declaration = True,
    incremental = True,
    source_map = True,
    tsconfig = ":tsconfig_db",
    deps = DEPS + [
        ":components",
    ],
)

ts_project(
    name = "components_test",
    srcs = glob(
        TEST_FILES + ["e2e/**/*.ts"],
    ),
    composite = True,
    declaration = True,
    incremental = True,
    source_map = True,
    tsconfig = ":tsconfig_test",
    deps = DEPS + [
        "@npm//@types/jest",
        "@npm//ci-info",
        "@npm//execa",
        ":components",
        ":components_db",
    ],
)

nodejs_app(
    name = "updates",
    data = [
        ":components",
    ],
    entry_point = "src/index.ts",
)

nodejs_binary(
    name = "seed",
    args = [
        "--nobazel_run_linker",
        "--nobazel_node_patches",
    ],
    data = [
        ":components_db",
        ":schema_drop",
        "@npm//execa",
    ],
    entry_point = "db/seed.ts",
    tags = ["manual"],
)

jest_test(
    name = "test",
    srcs = [
        ":components_test",
        ":schema_update",
    ],
    env = ENV_MIKRO_ORM,
    deps = DEPS + [
        "@npm//docker-compose",
    ],
)

DEPS_MIKRO_ORM = [
    ":components_db",
    "//:package.json",
]

ENV_MIKRO_ORM = {
    "MIKRO_ORM_CLI": package_name() + "/src/mikro-orm-config.js",
}

mikro_orm(
    name = "schema_up",
    args = [
        "schema:update",
        "--run",
        "--fk-checks",
    ],
    data = DEPS_MIKRO_ORM,
    env = ENV_MIKRO_ORM,
    tags = ["schema_up"],
)

mikro_orm(
    name = "schema_drop",
    args = [
        "schema:drop",
        "--run",
        "--fk-checks",
        "--drop-migrations-table",
    ],
    data = DEPS_MIKRO_ORM,
    env = ENV_MIKRO_ORM,
    tags = [
        "manual",
        "schema_down",
    ],
)
